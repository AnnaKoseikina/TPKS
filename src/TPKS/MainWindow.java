package TPKS;

import java.awt.Component;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Anna
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Graph");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setText("BY2X1↑1Y1Y3↑3↓1X2↑2Y4Y1↑4↓2Y3Y6↓4↓3Y5E");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 343, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jButton2.setText("Save");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Open");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Check");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Save graph");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Open graph");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Build table");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Save table");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Open table");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Minimize");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Save Mini");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Open Mini");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton7)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton10)
                    .addComponent(jButton11)
                    .addComponent(jButton12))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton8)
                        .addGap(18, 18, 18)
                        .addComponent(jButton9)
                        .addGap(18, 18, 18)
                        .addComponent(jButton10)
                        .addGap(18, 18, 18)
                        .addComponent(jButton11)
                        .addGap(18, 18, 18)
                        .addComponent(jButton12)
                        .addGap(0, 265, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method for building graph
     *
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Algorithm a = new Algorithm();
        jPanel1.removeAll();
        try {
            //    if (a.check()) {
            a.parseAlgorithm(jTextField1.getText());
            Graph g = new Graph(a.getStructures());
            g.setSize(1500, 1500);

            jPanel1.add(g);
            jPanel1.repaint();
            //      }
        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Algorithm a = new Algorithm();
        try {
            a.parseAlgorithm(jTextField1.getText());
            if (a.check()) {
                FileOutputStream out = new FileOutputStream("algo.bin");
                ObjectOutputStream oos = new ObjectOutputStream(out);
                oos.writeObject(a.getMatrix());
                oos.writeObject(a.getSignals());
                oos.writeObject(a.getSign());
                oos.close();
            }
        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        try {
            FileInputStream in = new FileInputStream("algo.bin");
            ObjectInputStream ois = new ObjectInputStream(in);
            Algorithm a = new Algorithm();
            a.setMatrix((int[][]) ois.readObject());
            a.setSignals((int[][]) ois.readObject());
            a.setSign((ArrayList<String>) ois.readObject());
            ArrayList<String> col = new ArrayList<String>();
            String buf2 = "";
            for (int i = 0; i < a.getSignals()[0].length; i++) {
                for (int j = 0; j < a.getSignals().length; j++) {
                    if (a.getSignals()[j][i] == 1) {
                        buf2 = buf2 + a.getSign().get(j);
                    }
                }
                col.add(buf2);
                buf2 = "";
            }
            String algo = "";
            int arr = 1;
            for (int i = 0; i < col.size(); i++) {
                if (col.get(i).toString().indexOf('X') != -1) {
                    int trans = 0;
                    boolean opened = false;
                    for (int j = 0; j < a.getMatrix().length; j++) {
                        if (a.getMatrix()[i][j] == 1 || a.getMatrix()[i][j] == 2) {
                            //      if (j - i > 1) {
                            if (trans == 0) {
                                if (j > i) {
                                    col.set(i, col.get(i) + "\u2191" + arr);
                                    trans++;
                                    opened = true;
                                } else {
                                    col.set(j, "\u2193" + arr + col.get(j));
                                    trans++;
                                }
                            } else if (trans == 1) {
                                if (opened) {
                                    col.set(j, "\u2193" + arr + col.get(j));
                                    trans++;
                                } else {
                                    col.set(i, col.get(i) + "\u2191" + arr);
                                    trans++;
                                }
                            }
                            //            }
                        }
                    }
                    arr++;
                }
                if (col.get(i).toString().lastIndexOf('Y') != -1) {
                    int trans = 0;
                    //  boolean opened = false;
                    for (int j = 0; j < a.getMatrix().length; j++) {
                        if (a.getMatrix()[i][j] == 1) {
                            //      if (j - i > 1) {
                            if (trans == 0) {
                                if (!col.get(j).equals(col.get(i + 1))) {
                                    col.set(i, col.get(i) + "\u2191" + arr);
                                    trans++;
                                    //  opened = true;
                                    col.set(j, "\u2193" + arr + col.get(j));
                                    arr++;
                                }
                            }
                            //            }
                        }
                    }

                }
            }

            for (int i = 0; i < col.size(); i++) {
                if (col.get(i).lastIndexOf('Y') == 0 || col.get(i).lastIndexOf('X') == 0) {
                    algo = algo + col.get(i).toString();
                } else if (col.get(i).equals("B") || col.get(i).equals("E")) {
                    algo = algo + col.get(i).toString();
                } else if (col.get(i).toString().lastIndexOf('Y') != 0 && new String(col.get(i).toString().charAt(0) + "").equals("\u2193")) {
                    algo = algo + col.get(i).toString();
                } else {
                    algo = algo + "(" + col.get(i).toString() + ")";
                }

            }
            jTextField1.setText(algo);
        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Algorithm a = new Algorithm();
        try {
            a.parseAlgorithm(jTextField1.getText());
            if (!a.check()) {
                JOptionPane.showMessageDialog(this, "Invalid algotithm"
                        + "");
            }
        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton4ActionPerformed
    /**
     * Method for writing code to file
     *
     * @param evt
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter("graph.txt"));
            Algorithm a = new Algorithm();
            a.parseAlgorithm(jTextField1.getText());
            Graph g = new Graph(a.getStructures());
            bw.write(g.getVertexes().size() + "\r\n");

            for (int i = 0; i < g.getVertexes().size(); i++) {
                bw.write(g.getVertexes().get(i).getValue() + ";" + g.getVertexes().get(i).getCode() + "\r\n");
            }
            bw.write(g.getEdges().size() + "\r\n");
            for (int i = 0; i < g.getEdges().size(); i++) {
                bw.write(g.getVertexes().indexOf(g.getEdges().get(i).getFrom()) + ";" + g.getVertexes().indexOf(g.getEdges().get(i).getTo()) + ";" + g.getEdges().get(i).getPath() + "\r\n");
            }
            bw.close();
        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed
    /**
     * Method for opening graph from file
     *
     * @param evt
     */
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            jPanel1.removeAll();
            BufferedReader br = new BufferedReader(new FileReader("graph.txt"));
            int v_size = Integer.parseInt(br.readLine());
            ArrayList<Vertex> vertexes = new ArrayList<>();
            for (int i = 0; i < v_size; i++) {
                String buf = br.readLine();
                vertexes.add(new Vertex(buf.split(";")[0], buf.split(";")[1]));
            }
            int e_size = Integer.parseInt(br.readLine());
            ArrayList<EdgeComponent> edges = new ArrayList<>();
            for (int i = 0; i < e_size; i++) {
                String buf = br.readLine();
                edges.add(new EdgeComponent(jPanel1, vertexes.get(Integer.parseInt(buf.split(";")[0])), vertexes.get(Integer.parseInt(buf.split(";")[1])), buf.split(";")[2]));
                vertexes.get(Integer.parseInt(buf.split(";")[0])).addComponent(edges.get(edges.size() - 1));
                vertexes.get(Integer.parseInt(buf.split(";")[1])).addComponent(edges.get(edges.size() - 1));
            }
            Graph g = new Graph(vertexes, edges);
            g.setSize(1500, 1500);

            jPanel1.add(g);
            jPanel1.repaint();

        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        Algorithm a = new Algorithm();
        jPanel1.removeAll();
        try {
            //    if (a.check()) {
            a.parseAlgorithm(jTextField1.getText());
            Graph g = new Graph(a.getStructures());
            g.setSize(1500, 1500);

            jPanel1.add(g);
            jPanel1.repaint();
            //      }
            Table t = new Table(g.getMap(), g, jTextField1.getText());
            for (int i = 0; i < t.getTabl().length; i++) {
                for (int j = 0; j < t.getTabl()[i].length; j++) {
                    if (j == 3 || j == 6 || j == 7 || j == 10 || j == 12 || j == 14) {
                        System.out.print(" ");
                    }
                    System.out.print(t.getTabl()[i][j]);
                }
                System.out.println();
            }
            TableFrame m = new TableFrame(t);
            m.setVisible(true);

        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        Algorithm a = new Algorithm();
        jPanel1.removeAll();
        try {
            //    if (a.check()) {
            a.parseAlgorithm(jTextField1.getText());
            Graph g = new Graph(a.getStructures());
            g.setSize(1500, 1500);

            jPanel1.add(g);
            jPanel1.repaint();
            //      }
            Table t = new Table(g.getMap(), g, jTextField1.getText());
            for (int i = 0; i < t.getTabl().length; i++) {
                for (int j = 0; j < t.getTabl()[i].length; j++) {
                    if (j == 3 || j == 6 || j == 7 || j == 10 || j == 12 || j == 14) {
                        System.out.print(" ");
                    }
                    System.out.print(t.getTabl()[i][j]);
                }
                System.out.println();
            }
            t.write(new File("table.bin"));

        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        try {
            TableFrame t = new TableFrame(new Table(new File("table.bin")));
            t.setVisible(true);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        Algorithm a = new Algorithm();
        jPanel1.removeAll();
        try {
            //    if (a.check()) {
            a.parseAlgorithm(jTextField1.getText());
            Graph g = new Graph(a.getStructures());
            g.setSize(1500, 1500);

            jPanel1.add(g);
            jPanel1.repaint();
            //      }
            Table t = new Table(g.getMap(), g, jTextField1.getText());
            TableFrame m = new TableFrame(t);
            m.setVisible(true);
            String[] code = new String[g.getVertexes().size()];
            for (int i = 0; i < g.getVertexes().size(); i++) {
                code[i] = g.getVertexes().get(i).getCode();
            }
            int len = code[0].length();
            ArrayList<ArrayList<char[]>> min = new ArrayList<>();
            int countX = 0;
            for (int i = 0; i < jTextField1.getText().length(); i++) {
                if (jTextField1.getText().charAt(i) == 'X') {
                    countX++;
                }
            }
            //    int countY = t.getColums().length - len * 4 - countX - 1;
            int index = len * 2 + countX;
            ArrayList<ArrayList<char[]>> minis = new ArrayList<>();
            ArrayList<ArrayList<char[]>> ddnfs = new ArrayList<>();
            ArrayList<String> functions = new ArrayList<>();
            for (int i = index; i < t.getColums().length - 1; i++) {
                functions.add(t.getColums()[i + 1]);
                ArrayList<char[]> func = new ArrayList<>();
                for (int j = 0; j < t.getRows().length; j++) {

                    if (t.getTabl()[j][i] == '1') {
                        char[] f = new char[len];
                        System.arraycopy(t.getTabl()[j], 0, f, 0, len);
                        if (!contains(f, func)) {
                            func.add(f);
                        }
                    }


                }
                ArrayList<char[]> mini = new ArrayList<>();
                boolean[] glued = new boolean[func.size()];
                for (int k = 0; k < glued.length; k++) {
                    glued[k] = false;
                }
                ddnfs.add(func);
                Minimization.minimize(func, mini, glued);
                minis.add(mini);
                System.out.println();
            }
            Mini mmm = new Mini(minis, ddnfs, functions);
            mmm.setVisible(true);

        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        Algorithm a = new Algorithm();
        jPanel1.removeAll();
        try {
            //    if (a.check()) {
            a.parseAlgorithm(jTextField1.getText());
            Graph g = new Graph(a.getStructures());
            g.setSize(1500, 1500);

            jPanel1.add(g);
            jPanel1.repaint();
            //      }
            Table t = new Table(g.getMap(), g, jTextField1.getText());
            TableFrame m = new TableFrame(t);

            String[] code = new String[g.getVertexes().size()];
            for (int i = 0; i < g.getVertexes().size(); i++) {
                code[i] = g.getVertexes().get(i).getCode();
            }
            int len = code[0].length();
            ArrayList<ArrayList<char[]>> min = new ArrayList<>();
            int countX = 0;
            for (int i = 0; i < jTextField1.getText().length(); i++) {
                if (jTextField1.getText().charAt(i) == 'X') {
                    countX++;
                }
            }
            int index = len * 2 + countX;
            ArrayList<ArrayList<char[]>> minis = new ArrayList<>();
            ArrayList<ArrayList<char[]>> ddnfs = new ArrayList<>();
            ArrayList<String> functions = new ArrayList<>();
            for (int i = index; i < t.getColums().length - 1; i++) {
                functions.add(t.getColums()[i + 1]);
                ArrayList<char[]> func = new ArrayList<>();
                for (int j = 0; j < t.getRows().length; j++) {

                    if (t.getTabl()[j][i] == '1') {
                        char[] f = new char[len];
                        System.arraycopy(t.getTabl()[j], 0, f, 0, len);
                        if (!contains(f, func)) {
                            func.add(f);
                        }
                    }


                }
                ArrayList<char[]> mini = new ArrayList<>();
                boolean[] glued = new boolean[func.size()];
                for (int k = 0; k < glued.length; k++) {
                    glued[k] = false;
                }
                ddnfs.add(func);
                Minimization.minimize(func, mini, glued);
                minis.add(mini);
                System.out.println();
            }
            Mini mmm = new Mini(minis, ddnfs, functions);
            BufferedWriter bw = new BufferedWriter(new FileWriter(new File("mini.txt")));
            bw.write(mmm.getText());
            bw.close();
        } catch (Exception ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        try {
            BufferedReader br = new BufferedReader(new FileReader(new File("mini.txt")));
            Mini m = new Mini();
            String str = "";
            String buf = br.readLine();
            while (buf != null) {
                str = str + buf;
                buf = br.readLine();
            }
            br.close();
            m.setText(str);
            m.setVisible(true);

        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton12ActionPerformed
    private boolean contains(char[] value, ArrayList<char[]> result) {
        for (char[] c : result) {
            if (equals(c, value)) {
                return true;
            }
        }
        return false;
    }

    private boolean equals(char[] c1, char[] c2) {
        for (int i = 0; i < c1.length; i++) {
            if (c1[i] != c2[i]) {
                return false;
            }
        }
        return true;
    }

    /**
     * @param args the command line arguments
     * @throws Exception
     */
    public static void main(String args[]) throws Exception {



        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
